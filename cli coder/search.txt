Of course. Here is a step-by-step guide to implement the search functionality using your command-line interface.

Copy and paste these commands into your terminal one by one.

### Step 1: Create the Search Component

This command creates the new search component file at `components/ui/search.tsx`.

```bash
mkdir -p components/ui && cat << 'EOF' > components/ui/search.tsx
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { SearchIcon } from "lucide-react";

export function Search() {
  const [query, setQuery] = useState("");
  const router = useRouter();

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    if (query.trim()) {
      router.push(`/search?q=${query}`);
    }
  };

  return (
    <form onSubmit={handleSearch} className="flex items-center space-x-2">
      <Input
        type="search"
        placeholder="Search..."
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        className="w-full"
      />
      <Button type="submit" size="icon">
        <SearchIcon className="h-4 w-4" />
      </Button>
    </form>
  );
}
EOF
```

### Step 2: Create the Search Results Page

This command creates the page where the search results will be displayed at `app/search/page.tsx`.

```bash
mkdir -p app/search && cat << 'EOF' > app/search/page.tsx
"use client";

import { useSearchParams } from "next/navigation";
import { useEffect, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb";

interface SearchResult {
  title: string;
  description: string;
  url: string;
}

export default function SearchPage() {
  const searchParams = useSearchParams();
  const query = searchParams.get("q");
  const [results, setResults] = useState<SearchResult[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (query) {
      const fetchResults = async () => {
        setLoading(true);
        const response = await fetch(`/api/search?q=${query}`);
        const data = await response.json();
        setResults(data);
        setLoading(false);
      };

      fetchResults();
    }
  }, [query]);

  return (
    <div className="container mx-auto px-4 py-8">
      <Breadcrumb>
        <BreadcrumbList>
          <BreadcrumbItem>
            <BreadcrumbLink href="/">Home</BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbSeparator />
          <BreadcrumbItem>
            <BreadcrumbPage>Search</BreadcrumbPage>
          </BreadcrumbItem>
        </BreadcrumbList>
      </Breadcrumb>
      <h1 className="text-3xl font-bold my-8">
        Search Results for &quot;{query}&quot;
      </h1>
      {loading ? (
        <p>Loading...</p>
      ) : results.length > 0 ? (
        <div className="grid gap-4">
          {results.map((result, index) => (
            <Card key={index}>
              <CardHeader>
                <CardTitle>
                  <a href={result.url} className="text-xl font-bold hover:underline">
                    {result.title}
                  </a>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p>{result.description}</p>
              </CardContent>
            </Card>
          ))}
        </div>
      ) : (
        <p>No results found.</p>
      )}
    </div>
  );
}
EOF
```

### Step 3: Create the Search API Endpoint

This command creates the API route that will handle the search logic at `app/api/search/route.ts`.

```bash
mkdir -p app/api/search && cat << 'EOF' > app/api/search/route.ts
import { NextResponse } from 'next/server';

const searchData = [
  {
    title: 'IT Infrastructure',
    description: 'Comprehensive solutions for your IT infrastructure needs.',
    url: '/solutions/it-infrastructure',
  },
  {
    title: 'Cyber Security',
    description: 'Protect your business from cyber threats with our advanced security solutions.',
    url: '/solutions/cyber-security',
  },
  {
    title: 'Cloud Solutions',
    description: 'Leverage the power of the cloud with our scalable and secure cloud solutions.',
    url: '/solutions/cloud-solutions',
  },
  {
    title: 'Managed Services',
    description: 'Offload your IT management to our team of experts.',
    url: '/services/managed-services',
  },
  {
    title: 'Consulting Services',
    description: 'Get expert advice to optimize your IT strategy.',
    url: '/services/consulting-services',
  },
];

export async function GET(request: Request) {
  const { searchParams } = new URL(request.url);
  const query = searchParams.get('q');

  if (!query) {
    return NextResponse.json([]);
  }

  const results = searchData.filter(
    (item) =>
      item.title.toLowerCase().includes(query.toLowerCase()) ||
      item.description.toLowerCase().includes(query.toLowerCase())
  );

  return NextResponse.json(results);
}
EOF
```

### Step 4: Update the Header Component

This command will **overwrite** your existing `header.tsx` file with the updated version that includes the search bar.

```bash
cat << 'EOF' > components/layout/header.tsx
import { Search } from "@/components/ui/search";
import { ThemeToggle } from "@/components/theme-toggle";
import {
  Sheet,
  SheetContent,
  SheetTrigger,
} from "@/components/ui/sheet";
import { Button } from "@/components/ui/button";
import { Menu } from "lucide-react";
import Link from "next/link";
import Image from "next/image";

export function Header() {
  return (
    <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="container flex h-16 items-center">
        <div className="mr-4 hidden md:flex">
          <Link href="/" className="mr-6 flex items-center space-x-2">
            <Image
              src="/nile-logo.png"
              alt="Nile logo"
              width={100}
              height={30}
            />
          </Link>
          <nav className="flex items-center space-x-6 text-sm font-medium">
            <Link href="/solutions">Solutions</Link>
            <Link href="/services">Services</Link>
            <Link href="/partners">Partners</Link>
            <Link href="/about">About Us</Link>
            <Link href="/contact">Contact</Link>
          </nav>
        </div>

        <div className="flex flex-1 items-center justify-between space-x-2 md:justify-end">
          <div className="w-full flex-1 md:w-auto md:flex-none">
            <Search />
          </div>
          <ThemeToggle />
          <Sheet>
            <SheetTrigger asChild>
              <Button variant="ghost" size="icon" className="md:hidden">
                <Menu />
              </Button>
            </SheetTrigger>
            <SheetContent side="right">
              <Link href="/" className="mr-6 flex items-center space-x-2">
                <Image
                  src="/nile-logo.png"
                  alt="Nile logo"
                  width={100}
                  height={30}
                />
              </Link>
              <div className="grid gap-2 py-6">
                <Link href="/solutions" className="flex w-full items-center py-2 text-lg font-semibold">Solutions</Link>
                <Link href="/services" className="flex w-full items-center py-2 text-lg font-semibold">Services</Link>
                <Link href="/partners" className="flex w-full items-center py-2 text-lg font-semibold">Partners</Link>
                <Link href="/about" className="flex w-full items-center py-2 text-lg font-semibold">About Us</Link>
                <Link href="/contact" className="flex w-full items-center py-2 text-lg font-semibold">Contact</Link>
              </div>
            </SheetContent>
          </Sheet>
        </div>
      </div>
    </header>
  );
}
EOF
```

### Step 5: Run the Development Server

After running all the commands, start your development server to see the new search bar in action.

```bash
npm run dev
```

You have now successfully added a search bar to your website.